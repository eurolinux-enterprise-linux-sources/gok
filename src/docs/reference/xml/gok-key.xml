<refentry id="gok-gok-key">
<refmeta>
<refentrytitle role="top_of_page" id="gok-gok-key.top_of_page">gok-key</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GOK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gok-key</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gok-gok-key.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="KeyStyles">KeyStyles</link>;
#define             <link linkend="FONT-SIZE-GROUP-UNDEFINED--CAPS">FONT_SIZE_GROUP_UNDEFINED</link>
#define             <link linkend="FONT-SIZE-GROUP-UNIQUE--CAPS">FONT_SIZE_GROUP_UNIQUE</link>
#define             <link linkend="FONT-SIZE-GROUP-WORDCOMPLETE--CAPS">FONT_SIZE_GROUP_WORDCOMPLETE</link>
<link linkend="gboolean">gboolean</link>            <link linkend="gok-key-initialize">gok_key_initialize</link>                  (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="xmlNode">xmlNode</link> *pNode);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-key-add-label">gok_key_add_label</link>                   (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *pLabelText,
                                                         <link linkend="guint">guint</link> level,
                                                         <link linkend="guint">guint</link> group,
                                                         const <link linkend="gchar">gchar</link> *vmods);
<link linkend="void">void</link>                <link linkend="gok-key-set-output">gok_key_set_output</link>                  (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gint">gint</link> Type,
                                                         <link linkend="gchar">gchar</link> *pName,
                                                         <link linkend="AccessibleKeySynthType">AccessibleKeySynthType</link> Flag);
<link linkend="void">void</link>                <link linkend="gok-key-change-label">gok_key_change_label</link>                (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *LabelText);
<link linkend="void">void</link>                <link linkend="gok-key-update-label">gok_key_update_label</link>                (<link linkend="GokKey">GokKey</link> *pKey);
<link linkend="gint">gint</link>                <link linkend="gok-key-get-label-lengthpercell">gok_key_get_label_lengthpercell</link>     (<link linkend="GokKey">GokKey</link> *pKey);
<link linkend="gint">gint</link>                <link linkend="gok-key-get-label-heightpercell">gok_key_get_label_heightpercell</link>     (<link linkend="GokKey">GokKey</link> *pKey);
<link linkend="gint">gint</link>                <link linkend="gok-key-calculate-font-size">gok_key_calculate_font_size</link>         (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gboolean">gboolean</link> width,
                                                         <link linkend="gboolean">gboolean</link> bHeight);
<link linkend="void">void</link>                <link linkend="gok-key-set-font-size">gok_key_set_font_size</link>               (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gint">gint</link> Size);
<link linkend="void">void</link>                <link linkend="gok-key-set-button-name">gok_key_set_button_name</link>             (<link linkend="GokKey">GokKey</link> *pKey);
<link linkend="void">void</link>                <link linkend="gok-key-set-button-label">gok_key_set_button_label</link>            (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *LabelText);
<link linkend="gchar">gchar</link>*              <link linkend="gok-key-get-label">gok_key_get_label</link>                   (<link linkend="GokKey">GokKey</link> *pKey);
<link linkend="GokKeyLabel">GokKeyLabel</link>*        <link linkend="gok-keylabel-new">gok_keylabel_new</link>                    (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *pLabelText,
                                                         <link linkend="guint">guint</link> level,
                                                         <link linkend="guint">guint</link> group,
                                                         const <link linkend="gchar">gchar</link> *vmods);
<link linkend="void">void</link>                <link linkend="gok-keylabel-delete">gok_keylabel_delete</link>                 (<link linkend="GokKeyLabel">GokKeyLabel</link> *pKeyLabel);
<link linkend="void">void</link>                <link linkend="gok-key-set-cells">gok_key_set_cells</link>                   (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gint">gint</link> top,
                                                         <link linkend="gint">gint</link> bottom,
                                                         <link linkend="gint">gint</link> left,
                                                         <link linkend="gint">gint</link> right);
<link linkend="GokKey">GokKey</link>*             <link linkend="gok-key-duplicate">gok_key_duplicate</link>                   (<link linkend="GokKey">GokKey</link> *pKey);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gok-gok-key.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gok-gok-key.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="KeyStyles" role="enum">
<title>enum KeyStyles</title>
<indexterm zone="KeyStyles"><primary sortas="KeyStyles">KeyStyles</primary></indexterm><programlisting>typedef enum {
KEYSTYLE_NORMAL,
KEYSTYLE_BRANCH,
KEYSTYLE_BRANCHBACK,
KEYSTYLE_GENERALDYNAMIC,
KEYSTYLE_BRANCHMENUS,
KEYSTYLE_BRANCHMENUITEMS,
KEYSTYLE_MENUITEM,
KEYSTYLE_BRANCHTOOLBARS,
KEYSTYLE_TOOLBARITEM,
KEYSTYLE_BRANCHGUI,
KEYSTYLE_BRANCHGUIACTIONS,
KEYSTYLE_PAGESELECTION,
KEYSTYLE_BRANCHCOMPOSE,
KEYSTYLE_TEXTNAV,
KEYSTYLE_EDIT,
KEYSTYLE_SELECT,
KEYSTYLE_TOGGLESELECT,
KEYSTYLE_BRANCHALPHABET,
KEYSTYLE_SETTINGS,
KEYSTYLE_SPELL,
KEYSTYLE_WORDCOMPLETE,
KEYSTYLE_POINTERCONTROL,
KEYSTYLE_BRANCHHYPERTEXT,
KEYSTYLE_BRANCHMODAL,
KEYSTYLE_HTMLACTION,
KEYSTYLE_HYPERLINK,
KEYSTYLE_BRANCHTEXT,
KEYSTYLE_HELP,
KEYSTYLE_ABOUT,
KEYSTYLE_DOCK,
KEYSTYLE_MOUSE,
KEYSTYLE_MOUSEBUTTON,
KEYSTYLE_REPEATNEXT,
KEYSTYLE_ADDWORD,
KEYSTYLE_INSENSITIVE
} KeyStyles;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="FONT-SIZE-GROUP-UNDEFINED--CAPS" role="macro">
<title>FONT_SIZE_GROUP_UNDEFINED</title>
<indexterm zone="FONT-SIZE-GROUP-UNDEFINED--CAPS"><primary sortas="FONT_SIZE_GROUP_UNDEFINED">FONT_SIZE_GROUP_UNDEFINED</primary></indexterm><programlisting>#define FONT_SIZE_GROUP_UNDEFINED 0
</programlisting>
<para>
</para></refsect2>
<refsect2 id="FONT-SIZE-GROUP-UNIQUE--CAPS" role="macro">
<title>FONT_SIZE_GROUP_UNIQUE</title>
<indexterm zone="FONT-SIZE-GROUP-UNIQUE--CAPS"><primary sortas="FONT_SIZE_GROUP_UNIQUE">FONT_SIZE_GROUP_UNIQUE</primary></indexterm><programlisting>#define FONT_SIZE_GROUP_UNIQUE -1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="FONT-SIZE-GROUP-WORDCOMPLETE--CAPS" role="macro">
<title>FONT_SIZE_GROUP_WORDCOMPLETE</title>
<indexterm zone="FONT-SIZE-GROUP-WORDCOMPLETE--CAPS"><primary sortas="FONT_SIZE_GROUP_WORDCOMPLETE">FONT_SIZE_GROUP_WORDCOMPLETE</primary></indexterm><programlisting>#define FONT_SIZE_GROUP_WORDCOMPLETE -2
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gok-key-initialize" role="function">
<title>gok_key_initialize ()</title>
<indexterm zone="gok-key-initialize"><primary sortas="gok_key_initialize">gok_key_initialize</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_key_initialize                  (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="xmlNode">xmlNode</link> *pNode);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that's getting initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pNode</parameter>&#160;:</term>
<listitem><simpara> Pointer to the XML node that contains the key data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the key was initialized, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-add-label" role="function">
<title>gok_key_add_label ()</title>
<indexterm zone="gok-key-add-label"><primary sortas="gok_key_add_label">gok_key_add_label</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_key_add_label                   (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *pLabelText,
                                                         <link linkend="guint">guint</link> level,
                                                         <link linkend="guint">guint</link> group,
                                                         const <link linkend="gchar">gchar</link> *vmods);</programlisting>
<para>
Adds a label to the key. This allocates memory for the label that will
be freed in gok_key_delete.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that's gets the new label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pLabelText</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>group</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vmods</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the key was initialized, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-set-output" role="function">
<title>gok_key_set_output ()</title>
<indexterm zone="gok-key-set-output"><primary sortas="gok_key_set_output">gok_key_set_output</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_set_output                  (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gint">gint</link> Type,
                                                         <link linkend="gchar">gchar</link> *pName,
                                                         <link linkend="AccessibleKeySynthType">AccessibleKeySynthType</link> Flag);</programlisting>
<para>
Sets the output for the key. This allocates memory for the output that will
be freed in gok_key_delete.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that's gets the new output.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Type</parameter>&#160;:</term>
<listitem><simpara> Type of output (e.g. keysym or keycode)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pName</parameter>&#160;:</term>
<listitem><simpara> Pointer to the name string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Flag</parameter>&#160;:</term>
<listitem><simpara> Type of key synth output (if relevant)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-change-label" role="function">
<title>gok_key_change_label ()</title>
<indexterm zone="gok-key-change-label"><primary sortas="gok_key_change_label">gok_key_change_label</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_change_label                (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *LabelText);</programlisting>
<para>
Changes the label displayed on the gok key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that gets the new label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>LabelText</parameter>&#160;:</term>
<listitem><simpara> The new label text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-update-label" role="function">
<title>gok_key_update_label ()</title>
<indexterm zone="gok-key-update-label"><primary sortas="gok_key_update_label">gok_key_update_label</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_update_label                (<link linkend="GokKey">GokKey</link> *pKey);</programlisting>
<para>
Changes the key's label if the modifier state has changed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that gets an updated label.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-get-label-lengthpercell" role="function">
<title>gok_key_get_label_lengthpercell ()</title>
<indexterm zone="gok-key-get-label-lengthpercell"><primary sortas="gok_key_get_label_lengthpercell">gok_key_get_label_lengthpercell</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_key_get_label_lengthpercell     (<link linkend="GokKey">GokKey</link> *pKey);</programlisting>
<para>
Calculates the length of the key's label. Some keys span more
than one cell so divide the label length into the number of cells.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key you want the to find the label length per cell.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The length of the key's label per cell.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-get-label-heightpercell" role="function">
<title>gok_key_get_label_heightpercell ()</title>
<indexterm zone="gok-key-get-label-heightpercell"><primary sortas="gok_key_get_label_heightpercell">gok_key_get_label_heightpercell</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_key_get_label_heightpercell     (<link linkend="GokKey">GokKey</link> *pKey);</programlisting>
<para>
Calculates the height of the key's label. Some keys span more
than one cell so divide the label height into the number of cells.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key you want to find the height.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The height of the key's label per cell.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-calculate-font-size" role="function">
<title>gok_key_calculate_font_size ()</title>
<indexterm zone="gok-key-calculate-font-size"><primary sortas="gok_key_calculate_font_size">gok_key_calculate_font_size</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_key_calculate_font_size         (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gboolean">gboolean</link> width,
                                                         <link linkend="gboolean">gboolean</link> bHeight);</programlisting>
<para>
Calculates the font size needed for the key's label to fill the key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that we're getting the font size for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bHeight</parameter>&#160;:</term>
<listitem><simpara> If TRUE then calculate the font size needed for the height
of the key's label.
Note: Both bWidth and bHeight can be TRUE.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The font size, in 1000s of a point (e.g. 9 point is 9000).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-set-font-size" role="function">
<title>gok_key_set_font_size ()</title>
<indexterm zone="gok-key-set-font-size"><primary sortas="gok_key_set_font_size">gok_key_set_font_size</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_set_font_size               (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gint">gint</link> Size);</programlisting>
<para>
Sets the font size for the key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that gets the new font size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Size</parameter>&#160;:</term>
<listitem><simpara> Font size you want the key's text to be.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-set-button-name" role="function">
<title>gok_key_set_button_name ()</title>
<indexterm zone="gok-key-set-button-name"><primary sortas="gok_key_set_button_name">gok_key_set_button_name</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_set_button_name             (<link linkend="GokKey">GokKey</link> *pKey);</programlisting>
<para>
Sets the 'name' of the key's label. The 'name' is used to determine
the key/label colors from the .rc file. This must be called for every key
after it's created and after the label name has been changed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that gets the new 'name'.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-set-button-label" role="function">
<title>gok_key_set_button_label ()</title>
<indexterm zone="gok-key-set-button-label"><primary sortas="gok_key_set_button_label">gok_key_set_button_label</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_set_button_label            (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *LabelText);</programlisting>
<para>
Changes the button label displayed on the key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that will have it's button label changed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>LabelText</parameter>&#160;:</term>
<listitem><simpara> Text for the button.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-get-label" role="function">
<title>gok_key_get_label ()</title>
<indexterm zone="gok-key-get-label"><primary sortas="gok_key_get_label">gok_key_get_label</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gok_key_get_label                   (<link linkend="GokKey">GokKey</link> *pKey);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that you want the label for.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the label's text string, NULL if no label.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-keylabel-new" role="function">
<title>gok_keylabel_new ()</title>
<indexterm zone="gok-keylabel-new"><primary sortas="gok_keylabel_new">gok_keylabel_new</primary></indexterm><programlisting><link linkend="GokKeyLabel">GokKeyLabel</link>*        gok_keylabel_new                    (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gchar">gchar</link> *pLabelText,
                                                         <link linkend="guint">guint</link> level,
                                                         <link linkend="guint">guint</link> group,
                                                         const <link linkend="gchar">gchar</link> *vmods);</programlisting>
<para>
Allocates memory for a new key label and initializes the GokKeyLabel structure.
Returns a pointer to the new key label, NULL if it can't be created.
Add this label to a key so it will be deleted when the key is deleted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that gets the new label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pLabelText</parameter>&#160;:</term>
<listitem><simpara> Text string for this label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara> the level (see XKB spec) for which this label is valid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>group</parameter>&#160;:</term>
<listitem><simpara> the group (see XKB spec) for which this label is valid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vmods</parameter>&#160;:</term>
<listitem><simpara> a delimited list of virtual modifier names which must be matched 
        in order for this label to be valid, or NULL if no virtual 
        modifiers are relevant to this label.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the new key label, NULL if it wasn't created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-keylabel-delete" role="function">
<title>gok_keylabel_delete ()</title>
<indexterm zone="gok-keylabel-delete"><primary sortas="gok_keylabel_delete">gok_keylabel_delete</primary></indexterm><programlisting><link linkend="void">void</link>                gok_keylabel_delete                 (<link linkend="GokKeyLabel">GokKeyLabel</link> *pKeyLabel);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKeyLabel</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key label that will be deleted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-set-cells" role="function">
<title>gok_key_set_cells ()</title>
<indexterm zone="gok-key-set-cells"><primary sortas="gok_key_set_cells">gok_key_set_cells</primary></indexterm><programlisting><link linkend="void">void</link>                gok_key_set_cells                   (<link linkend="GokKey">GokKey</link> *pKey,
                                                         <link linkend="gint">gint</link> top,
                                                         <link linkend="gint">gint</link> bottom,
                                                         <link linkend="gint">gint</link> left,
                                                         <link linkend="gint">gint</link> right);</programlisting>
<para>
Changes the cell coordinates (used by the editor).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Key that gets it's cells changed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>top</parameter>&#160;:</term>
<listitem><simpara> Top cell for the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bottom</parameter>&#160;:</term>
<listitem><simpara> Bottom cell for the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>left</parameter>&#160;:</term>
<listitem><simpara> Left cell for the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>right</parameter>&#160;:</term>
<listitem><simpara> Right cell for the key.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-key-duplicate" role="function">
<title>gok_key_duplicate ()</title>
<indexterm zone="gok-key-duplicate"><primary sortas="gok_key_duplicate">gok_key_duplicate</primary></indexterm><programlisting><link linkend="GokKey">GokKey</link>*             gok_key_duplicate                   (<link linkend="GokKey">GokKey</link> *pKey);</programlisting>
<para>
Not implemented yet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey</parameter>&#160;:</term>
<listitem><simpara> Pointer to the key that gets duplicated
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the duplicate key, NULL if it was not created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
