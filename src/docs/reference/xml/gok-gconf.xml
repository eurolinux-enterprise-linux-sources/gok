<refentry id="gok-gok-gconf">
<refmeta>
<refentrytitle role="top_of_page" id="gok-gok-gconf.top_of_page">gok-gconf</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GOK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gok-gconf</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gok-gok-gconf.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="gboolean">gboolean</link>            <link linkend="gok-gconf-get-int">gok_gconf_get_int</link>                   (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint">gint</link> *dest);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-gconf-set-int">gok_gconf_set_int</link>                   (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint">gint</link> value);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-gconf-get-bool">gok_gconf_get_bool</link>                  (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gboolean">gboolean</link> *dest);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-gconf-set-bool">gok_gconf_set_bool</link>                  (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gboolean">gboolean</link> value);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-gconf-get-string">gok_gconf_get_string</link>                (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gchar">gchar</link> **dest);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-gconf-set-string">gok_gconf_set_string</link>                (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="gchar">gchar</link> *value);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gok-gok-gconf.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gok-gok-gconf.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="gok-gconf-get-int" role="function">
<title>gok_gconf_get_int ()</title>
<indexterm zone="gok-gconf-get-int"><primary sortas="gok_gconf_get_int">gok_gconf_get_int</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_gconf_get_int                   (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint">gint</link> *dest);</programlisting>
<para>
Retrieves the requested key and stores it in the given dest.  If an
error occurs during retreiving the key a message is logged using
gok_log_x and dest is left unchanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> GConfClient to use to retreive the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>    GConf key to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest</parameter>&#160;:</term>
<listitem><simpara>   Pointer to a gint to store the retrieved key, if successful.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key retrieved successfully, FALSE if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-gconf-set-int" role="function">
<title>gok_gconf_set_int ()</title>
<indexterm zone="gok-gconf-set-int"><primary sortas="gok_gconf_set_int">gok_gconf_set_int</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_gconf_set_int                   (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gint">gint</link> value);</programlisting>
<para>
Stores the given (key, value) pair if it is different from what is
in GConf already. If an error occurs during storing the key a
message is logged using gok_log_x.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>  GConfClient to use to set the value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>     GConf key to set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>   gint to store.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key stored successfully, FALSE if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-gconf-get-bool" role="function">
<title>gok_gconf_get_bool ()</title>
<indexterm zone="gok-gconf-get-bool"><primary sortas="gok_gconf_get_bool">gok_gconf_get_bool</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_gconf_get_bool                  (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gboolean">gboolean</link> *dest);</programlisting>
<para>
Retrieves the requested key and stores it in the given dest.  If an
error occurs during retreiving the key a message is logged using
gok_log_x and dest is left unchanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> GConfClient to use to retreive the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>    GConf key to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest</parameter>&#160;:</term>
<listitem><simpara>   Pointer to a gboolean to store the retrieved key, if successful.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key retrieved successfully, FALSE if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-gconf-set-bool" role="function">
<title>gok_gconf_set_bool ()</title>
<indexterm zone="gok-gconf-set-bool"><primary sortas="gok_gconf_set_bool">gok_gconf_set_bool</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_gconf_set_bool                  (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Stores the given (key, value) pair if it is different from what is
in GConf already.  If an error occurs during storing the key a
message is logged using gok_log_x.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>  GConfClient to use to set the value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>     GConf key to set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>   gboolean to store.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key stored successfully, FALSE if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-gconf-get-string" role="function">
<title>gok_gconf_get_string ()</title>
<indexterm zone="gok-gconf-get-string"><primary sortas="gok_gconf_get_string">gok_gconf_get_string</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_gconf_get_string                (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gchar">gchar</link> **dest);</programlisting>
<para>
Retrieves the requested key and stores it in the given dest.  If an
error occurs during retreiving the key a message is logged using
gok_log_x and dest is left unchanged.
</para>
<para>
NOTE: *dest needs to be freed when finished with.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> GConfClient to use to retreive the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>    GConf key to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest</parameter>&#160;:</term>
<listitem><simpara>   Pointer to a pointer to a gchar to store the retrieved key, if successful.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key retrieved successfully, FALSE if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-gconf-set-string" role="function">
<title>gok_gconf_set_string ()</title>
<indexterm zone="gok-gconf-set-string"><primary sortas="gok_gconf_set_string">gok_gconf_set_string</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_gconf_set_string                (<link linkend="GConfClient">GConfClient</link> *client,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Stores the given (key, value) pair if it is different from what is
in GConf already.  If an error occurs during storing the key a
message is logged using gok_log_x.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>  GConfClient to use to set the value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>     GConf key to set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>   gchar to store.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key stored successfully, FALSE if an error occured.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
