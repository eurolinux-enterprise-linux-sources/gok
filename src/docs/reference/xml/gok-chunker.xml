<refentry id="gok-gok-chunker">
<refmeta>
<refentrytitle role="top_of_page" id="gok-gok-chunker.top_of_page">gok-chunker</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GOK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gok-chunker</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gok-gok-chunker.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="ChunkTypes">ChunkTypes</link>;
enum                <link linkend="ChunkOrder">ChunkOrder</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-chunk-all">gok_chunker_chunk_all</link>               (<link linkend="ChunkTypes">ChunkTypes</link> TypeChunks,
                                                         <link linkend="ChunkOrder">ChunkOrder</link> chunkOrder);
<link linkend="void">void</link>                <link linkend="gok-chunker-init-chunk">gok_chunker_init_chunk</link>              (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="void">void</link>                <link linkend="gok-chunker-delete-chunks">gok_chunker_delete_chunks</link>           (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="gboolean">gboolean</link> bAlsoNext);
<link linkend="void">void</link>                <link linkend="gok-chunker-reset">gok_chunker_reset</link>                   (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-next-chunk">gok_chunker_next_chunk</link>              (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-previous-chunk">gok_chunker_previous_chunk</link>          (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-next-key">gok_chunker_next_key</link>                (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-previous-key">gok_chunker_previous_key</link>            (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-keyup">gok_chunker_keyup</link>                   (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-keydown">gok_chunker_keydown</link>                 (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-keyleft">gok_chunker_keyleft</link>                 (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-keyright">gok_chunker_keyright</link>                (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-keyhighlight">gok_chunker_keyhighlight</link>            (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-wraptofirstchunk">gok_chunker_wraptofirstchunk</link>        (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-wraptolastchunk">gok_chunker_wraptolastchunk</link>         (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-wraptofirstkey">gok_chunker_wraptofirstkey</link>          (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-wraptolastkey">gok_chunker_wraptolastkey</link>           (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-wraptoleft">gok_chunker_wraptoleft</link>              (<link linkend="gint">gint</link> TrueFalse);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-wraptoright">gok_chunker_wraptoright</link>             (<link linkend="gint">gint</link> TrueFalse);
<link linkend="void">void</link>                <link linkend="gok-chunker-move-leftright">gok_chunker_move_leftright</link>          (<link linkend="gint">gint</link> TrueFalse);
<link linkend="void">void</link>                <link linkend="gok-chunker-move-topbottom">gok_chunker_move_topbottom</link>          (<link linkend="gint">gint</link> TrueFalse);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-next-chunk">gok_chunker_if_next_chunk</link>           (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-previous-chunk">gok_chunker_if_previous_chunk</link>       (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-next-key">gok_chunker_if_next_key</link>             (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-previous-key">gok_chunker_if_previous_key</link>         (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-top">gok_chunker_if_top</link>                  (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-bottom">gok_chunker_if_bottom</link>               (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-left">gok_chunker_if_left</link>                 (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-right">gok_chunker_if_right</link>                (void);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-if-key-selected">gok_chunker_if_key_selected</link>         (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-is-left">gok_chunker_is_left</link>                 (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-is-right">gok_chunker_is_right</link>                (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-is-top">gok_chunker_is_top</link>                  (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-is-bottom">gok_chunker_is_bottom</link>               (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);
<link linkend="void">void</link>                <link linkend="gok-chunker-counter-set">gok_chunker_counter_set</link>             (<link linkend="gint">gint</link> CounterId,
                                                         <link linkend="gint">gint</link> CounterValue);
<link linkend="void">void</link>                <link linkend="gok-chunker-counter-increment">gok_chunker_counter_increment</link>       (<link linkend="gint">gint</link> CounterId);
<link linkend="void">void</link>                <link linkend="gok-chunker-counter-decrement">gok_chunker_counter_decrement</link>       (<link linkend="gint">gint</link> CounterId);
<link linkend="void">void</link>                <link linkend="gok-chunker-state-restart">gok_chunker_state_restart</link>           (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-state-next">gok_chunker_state_next</link>              (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-state-jump">gok_chunker_state_jump</link>              (<link linkend="gchar">gchar</link> *NameState);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-select-chunk">gok_chunker_select_chunk</link>            (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-highlight-chunk">gok_chunker_highlight_chunk</link>         (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="void">void</link>                <link linkend="gok-chunker-unhighlight-chunk">gok_chunker_unhighlight_chunk</link>       (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="void">void</link>                <link linkend="gok-chunker-highlight-center-key">gok_chunker_highlight_center_key</link>    (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-highlight-first-chunk">gok_chunker_highlight_first_chunk</link>   (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-highlight-first-key">gok_chunker_highlight_first_key</link>     (void);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-insert-item-row-ltr">gok_chunker_insert_item_row_ltr</link>     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-insert-item-row-rtl">gok_chunker_insert_item_row_rtl</link>     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-insert-item-col-ttb">gok_chunker_insert_item_col_ttb</link>     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);
<link linkend="gboolean">gboolean</link>            <link linkend="gok-chunker-insert-item-col-btt">gok_chunker_insert_item_col_btt</link>     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);
<link linkend="void">void</link>                <link linkend="gok-chunker-dump-chunks">gok_chunker_dump_chunks</link>             (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-dump-chunk">gok_chunker_dump_chunk</link>              (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="GokChunk">GokChunk</link>*           <link linkend="gok-chunker-chunk-group">gok_chunker_chunk_group</link>             (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="gint">gint</link> NumberGroups,
                                                         <link linkend="ChunkOrder">ChunkOrder</link> Order,
                                                         <link linkend="gboolean">gboolean</link> bCanReorder);
<link linkend="void">void</link>                <link linkend="gok-chunker-add-chunkitem">gok_chunker_add_chunkitem</link>           (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);
<link linkend="gint">gint</link>                <link linkend="gok-chunker-count-chunkitems">gok_chunker_count_chunkitems</link>        (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="GokChunk">GokChunk</link>*           <link linkend="gok-chunker-make-2-vertical">gok_chunker_make_2_vertical</link>         (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="GokChunk">GokChunk</link>*           <link linkend="gok-chunker-make-2-horizontal">gok_chunker_make_2_horizontal</link>       (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="GokChunk">GokChunk</link>*           <link linkend="gok-chunker-make-4">gok_chunker_make_4</link>                  (<link linkend="GokChunk">GokChunk</link> *pChunk);
<link linkend="void">void</link>                <link linkend="gok-chunker-highlight-chunk-number">gok_chunker_highlight_chunk_number</link>  (<link linkend="gint">gint</link> Number);
<link linkend="GokChunk">GokChunk</link>*           <link linkend="gok-chunker-get-chunk">gok_chunker_get_chunk</link>               (<link linkend="gint">gint</link> Number);
<link linkend="void">void</link>                <link linkend="gok-chunker-highlight-all-keys">gok_chunker_highlight_all_keys</link>      (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-unhighlight-all-keys">gok_chunker_unhighlight_all_keys</link>    (void);
<link linkend="void">void</link>                <link linkend="gok-chunker-resolve-overlap">gok_chunker_resolve_overlap</link>         (<link linkend="GokChunk">GokChunk</link> *pChunk);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gok-gok-chunker.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gok-gok-chunker.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="ChunkTypes" role="enum">
<title>enum ChunkTypes</title>
<indexterm zone="ChunkTypes"><primary sortas="ChunkTypes">ChunkTypes</primary></indexterm><programlisting>typedef enum {
CHUNKER_RESET,
CHUNKER_NOCHUNKS,
CHUNKER_KEYS,
CHUNKER_ROWS,
CHUNKER_COLUMNS,
CHUNKER_RECURSIVE,
CHUNKER_2GROUPS,
CHUNKER_3GROUPS,
CHUNKER_4GROUPS,
CHUNKER_5GROUPS,
CHUNKER_6GROUPS
} ChunkTypes;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ChunkOrder" role="enum">
<title>enum ChunkOrder</title>
<indexterm zone="ChunkOrder"><primary sortas="ChunkOrder">ChunkOrder</primary></indexterm><programlisting>typedef enum {
CHUNKER_TOPTOBOTTOM_LEFTTORIGHT,
CHUNKER_TOPTOBOTTOM_RIGHTTOLEFT,
CHUNKER_BOTTOMTOTOP_LEFTTORIGHT,
CHUNKER_BOTTOMTOTOP_RIGHTTOLEFT,
CHUNKER_LEFTTORIGHT_TOPTOBOTTOM,
CHUNKER_LEFTTORIGHT_BOTTOMTOTOP,
CHUNKER_RIGHTTOLEFT_TOPTOBOTTOM,
CHUNKER_RIGHTTOLEFT_BOTTOMTOTOP
} ChunkOrder;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-chunk-all" role="function">
<title>gok_chunker_chunk_all ()</title>
<indexterm zone="gok-chunker-chunk-all"><primary sortas="gok_chunker_chunk_all">gok_chunker_chunk_all</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_chunk_all               (<link linkend="ChunkTypes">ChunkTypes</link> TypeChunks,
                                                         <link linkend="ChunkOrder">ChunkOrder</link> chunkOrder);</programlisting>
<para>
Breaks all the keyboards into chunks.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>TypeChunks</parameter>&#160;:</term>
<listitem><simpara> The type of chunks required e.g. rows or columns. 
			(See the enum 'ChunkTypes' for possible values.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>chunkOrder</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if everything went OK, FALSE if there was any problem.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-init-chunk" role="function">
<title>gok_chunker_init_chunk ()</title>
<indexterm zone="gok-chunker-init-chunk"><primary sortas="gok_chunker_init_chunk">gok_chunker_init_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_init_chunk              (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Initializes a GOK chunk. This must be called after creating any chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunk that will be initialized.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-delete-chunks" role="function">
<title>gok_chunker_delete_chunks ()</title>
<indexterm zone="gok-chunker-delete-chunks"><primary sortas="gok_chunker_delete_chunks">gok_chunker_delete_chunks</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_delete_chunks           (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="gboolean">gboolean</link> bAlsoNext);</programlisting>
<para>
Deletes a chunk and, optionally, any following chunks.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the first chunk in the list of chunks that gets deleted.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bAlsoNext</parameter>&#160;:</term>
<listitem><simpara> If TRUE then all chunks following the one given will be deleted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-reset" role="function">
<title>gok_chunker_reset ()</title>
<indexterm zone="gok-chunker-reset"><primary sortas="gok_chunker_reset">gok_chunker_reset</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_reset                   (void);</programlisting>
<para>
</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-next-chunk" role="function">
<title>gok_chunker_next_chunk ()</title>
<indexterm zone="gok-chunker-next-chunk"><primary sortas="gok_chunker_next_chunk">gok_chunker_next_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_next_chunk              (void);</programlisting>
<para>
Highlightes the next chunk.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-previous-chunk" role="function">
<title>gok_chunker_previous_chunk ()</title>
<indexterm zone="gok-chunker-previous-chunk"><primary sortas="gok_chunker_previous_chunk">gok_chunker_previous_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_previous_chunk          (void);</programlisting>
<para>
Highlightes the previous chunk.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-next-key" role="function">
<title>gok_chunker_next_key ()</title>
<indexterm zone="gok-chunker-next-key"><primary sortas="gok_chunker_next_key">gok_chunker_next_key</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_next_key                (void);</programlisting>
<para>
Highlightes the next key in the chunk.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-previous-key" role="function">
<title>gok_chunker_previous_key ()</title>
<indexterm zone="gok-chunker-previous-key"><primary sortas="gok_chunker_previous_key">gok_chunker_previous_key</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_previous_key            (void);</programlisting>
<para>
Highlightes the previous key in the selected chunk.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-keyup" role="function">
<title>gok_chunker_keyup ()</title>
<indexterm zone="gok-chunker-keyup"><primary sortas="gok_chunker_keyup">gok_chunker_keyup</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_keyup                   (void);</programlisting>
<para>
Highlights and selects the key to the top of the currently highlighted key.
This does NOT wrap to the bottom side of the keyboard (call gok_chunker_wraptobottom).</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-keydown" role="function">
<title>gok_chunker_keydown ()</title>
<indexterm zone="gok-chunker-keydown"><primary sortas="gok_chunker_keydown">gok_chunker_keydown</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_keydown                 (void);</programlisting>
<para>
Highlights and selects the right to the bottom of the currently highlighted key.
This does NOT wrap to the top side of the keyboard (call gok_chunker_wraptotop).</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-keyleft" role="function">
<title>gok_chunker_keyleft ()</title>
<indexterm zone="gok-chunker-keyleft"><primary sortas="gok_chunker_keyleft">gok_chunker_keyleft</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_keyleft                 (void);</programlisting>
<para>
Highlights and selects the key to the left of the currently highlighted key.
This does NOT wrap to the right side of the keyboard (call gok_chunker_wraptoright).</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-keyright" role="function">
<title>gok_chunker_keyright ()</title>
<indexterm zone="gok-chunker-keyright"><primary sortas="gok_chunker_keyright">gok_chunker_keyright</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_keyright                (void);</programlisting>
<para>
Highlights and selects the right to the right of the currently highlighted key.
This does NOT wrap to the left side of the keyboard (call gok_chunker_wraptoleft).</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-keyhighlight" role="function">
<title>gok_chunker_keyhighlight ()</title>
<indexterm zone="gok-chunker-keyhighlight"><primary sortas="gok_chunker_keyhighlight">gok_chunker_keyhighlight</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_keyhighlight            (void);</programlisting>
<para>
Highlights the given key.
</para>
<para>
NOT USED  (deprecate?)</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-wraptofirstchunk" role="function">
<title>gok_chunker_wraptofirstchunk ()</title>
<indexterm zone="gok-chunker-wraptofirstchunk"><primary sortas="gok_chunker_wraptofirstchunk">gok_chunker_wraptofirstchunk</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_wraptofirstchunk        (void);</programlisting>
<para>
Highlights the first chunk in the list of chunks</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-wraptolastchunk" role="function">
<title>gok_chunker_wraptolastchunk ()</title>
<indexterm zone="gok-chunker-wraptolastchunk"><primary sortas="gok_chunker_wraptolastchunk">gok_chunker_wraptolastchunk</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_wraptolastchunk         (void);</programlisting>
<para>
Highlights the last chunk in the list of chunks</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-wraptofirstkey" role="function">
<title>gok_chunker_wraptofirstkey ()</title>
<indexterm zone="gok-chunker-wraptofirstkey"><primary sortas="gok_chunker_wraptofirstkey">gok_chunker_wraptofirstkey</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_wraptofirstkey          (void);</programlisting>
<para>
Highlights the first key in the list of keys.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-wraptolastkey" role="function">
<title>gok_chunker_wraptolastkey ()</title>
<indexterm zone="gok-chunker-wraptolastkey"><primary sortas="gok_chunker_wraptolastkey">gok_chunker_wraptolastkey</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_wraptolastkey           (void);</programlisting>
<para>
Highlights the last key in the list of keys.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-wraptoleft" role="function">
<title>gok_chunker_wraptoleft ()</title>
<indexterm zone="gok-chunker-wraptoleft"><primary sortas="gok_chunker_wraptoleft">gok_chunker_wraptoleft</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_wraptoleft              (<link linkend="gint">gint</link> TrueFalse);</programlisting>
<para>
Highlights the leftmost key that is on the same row as the currently selected key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>TrueFalse</parameter>&#160;:</term>
<listitem><simpara> unused.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-wraptoright" role="function">
<title>gok_chunker_wraptoright ()</title>
<indexterm zone="gok-chunker-wraptoright"><primary sortas="gok_chunker_wraptoright">gok_chunker_wraptoright</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_wraptoright             (<link linkend="gint">gint</link> TrueFalse);</programlisting>
<para>
Highlights the rightmost key that is on the same row as the currently selected key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>TrueFalse</parameter>&#160;:</term>
<listitem><simpara> unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-move-leftright" role="function">
<title>gok_chunker_move_leftright ()</title>
<indexterm zone="gok-chunker-move-leftright"><primary sortas="gok_chunker_move_leftright">gok_chunker_move_leftright</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_move_leftright          (<link linkend="gint">gint</link> TrueFalse);</programlisting>
<para>
Not implemented yet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>TrueFalse</parameter>&#160;:</term>
<listitem><simpara> unused
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-move-topbottom" role="function">
<title>gok_chunker_move_topbottom ()</title>
<indexterm zone="gok-chunker-move-topbottom"><primary sortas="gok_chunker_move_topbottom">gok_chunker_move_topbottom</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_move_topbottom          (<link linkend="gint">gint</link> TrueFalse);</programlisting>
<para>
Not implemented yet.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>TrueFalse</parameter>&#160;:</term>
<listitem><simpara> unused
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-next-chunk" role="function">
<title>gok_chunker_if_next_chunk ()</title>
<indexterm zone="gok-chunker-if-next-chunk"><primary sortas="gok_chunker_if_next_chunk">gok_chunker_if_next_chunk</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_next_chunk           (void);</programlisting>
<para>
Tests if there is another chunk after the current chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a next chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-previous-chunk" role="function">
<title>gok_chunker_if_previous_chunk ()</title>
<indexterm zone="gok-chunker-if-previous-chunk"><primary sortas="gok_chunker_if_previous_chunk">gok_chunker_if_previous_chunk</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_previous_chunk       (void);</programlisting>
<para>
Tests if there is another chunk before the current chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a previous chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-next-key" role="function">
<title>gok_chunker_if_next_key ()</title>
<indexterm zone="gok-chunker-if-next-key"><primary sortas="gok_chunker_if_next_key">gok_chunker_if_next_key</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_next_key             (void);</programlisting>
<para>
Tests if there is another key after the current key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a next key, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-previous-key" role="function">
<title>gok_chunker_if_previous_key ()</title>
<indexterm zone="gok-chunker-if-previous-key"><primary sortas="gok_chunker_if_previous_key">gok_chunker_if_previous_key</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_previous_key         (void);</programlisting>
<para>
Tests if there is another key before the current key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a key chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-top" role="function">
<title>gok_chunker_if_top ()</title>
<indexterm zone="gok-chunker-if-top"><primary sortas="gok_chunker_if_top">gok_chunker_if_top</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_top                  (void);</programlisting>
<para>
Tests if there is a key to the top of the currently highlighted key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a key to the top, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-bottom" role="function">
<title>gok_chunker_if_bottom ()</title>
<indexterm zone="gok-chunker-if-bottom"><primary sortas="gok_chunker_if_bottom">gok_chunker_if_bottom</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_bottom               (void);</programlisting>
<para>
Tests if there is a key to the bottom of the currently highlighted key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a key to the bottom, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-left" role="function">
<title>gok_chunker_if_left ()</title>
<indexterm zone="gok-chunker-if-left"><primary sortas="gok_chunker_if_left">gok_chunker_if_left</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_left                 (void);</programlisting>
<para>
Tests if there is a key to the left of the currently highlighted key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a key to the left, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-right" role="function">
<title>gok_chunker_if_right ()</title>
<indexterm zone="gok-chunker-if-right"><primary sortas="gok_chunker_if_right">gok_chunker_if_right</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_right                (void);</programlisting>
<para>
Tests if there is a key to the right of the currently highlighted key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if there is a key to the right, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-if-key-selected" role="function">
<title>gok_chunker_if_key_selected ()</title>
<indexterm zone="gok-chunker-if-key-selected"><primary sortas="gok_chunker_if_key_selected">gok_chunker_if_key_selected</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_if_key_selected         (void);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Alwasy 0.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-is-left" role="function">
<title>gok_chunker_is_left ()</title>
<indexterm zone="gok-chunker-is-left"><primary sortas="gok_chunker_is_left">gok_chunker_is_left</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_is_left                 (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);</programlisting>
<para>
Tests if a key is left of another key. This does NOT test if the keys are on the same row.
This should be called when traversing a row from right to left.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey1</parameter>&#160;:</term>
<listitem><simpara> Key you want to test.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pKey2</parameter>&#160;:</term>
<listitem><simpara> Key you want to compare against.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if pKey1 is left of pKey2, FALSE if pKey2 is left of pKey1.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-is-right" role="function">
<title>gok_chunker_is_right ()</title>
<indexterm zone="gok-chunker-is-right"><primary sortas="gok_chunker_is_right">gok_chunker_is_right</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_is_right                (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);</programlisting>
<para>
Tests if a key is right of another key. This does NOT test if the keys are on the same row.
This should be called when traversing a row from left to right.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey1</parameter>&#160;:</term>
<listitem><simpara> Key you want to test.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pKey2</parameter>&#160;:</term>
<listitem><simpara> Key you want to compare against.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if pKey1 is right of pKey2, FALSE if pKey2 is left of pKey1.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-is-top" role="function">
<title>gok_chunker_is_top ()</title>
<indexterm zone="gok-chunker-is-top"><primary sortas="gok_chunker_is_top">gok_chunker_is_top</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_is_top                  (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);</programlisting>
<para>
Tests if a key is top of another key. This does NOT test if the keys are on the same column.
This should be called when traversing a column from bottom to top.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey1</parameter>&#160;:</term>
<listitem><simpara> Key you want to test.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pKey2</parameter>&#160;:</term>
<listitem><simpara> Key you want to compare against.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if pKey1 is higher than pKey2, FALSE if pKey2 is higher than pKey1.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-is-bottom" role="function">
<title>gok_chunker_is_bottom ()</title>
<indexterm zone="gok-chunker-is-bottom"><primary sortas="gok_chunker_is_bottom">gok_chunker_is_bottom</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_is_bottom               (<link linkend="GokKey">GokKey</link> *pKey1,
                                                         <link linkend="GokKey">GokKey</link> *pKey2);</programlisting>
<para>
Tests if a key is bottom of another key. This does NOT test if the keys are on the same column.
This should be called when traversing a column from top to bottom.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pKey1</parameter>&#160;:</term>
<listitem><simpara> Key you want to test.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pKey2</parameter>&#160;:</term>
<listitem><simpara> Key you want to compare against.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if pKey1 is bottom of pKey2, FALSE if pKey2 is bottom of pKey1.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-counter-set" role="function">
<title>gok_chunker_counter_set ()</title>
<indexterm zone="gok-chunker-counter-set"><primary sortas="gok_chunker_counter_set">gok_chunker_counter_set</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_counter_set             (<link linkend="gint">gint</link> CounterId,
                                                         <link linkend="gint">gint</link> CounterValue);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>CounterId</parameter>&#160;:</term>
<listitem><simpara> Counter you want to set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CounterValue</parameter>&#160;:</term>
<listitem><simpara> Value you want the counter set to.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-counter-increment" role="function">
<title>gok_chunker_counter_increment ()</title>
<indexterm zone="gok-chunker-counter-increment"><primary sortas="gok_chunker_counter_increment">gok_chunker_counter_increment</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_counter_increment       (<link linkend="gint">gint</link> CounterId);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>CounterId</parameter>&#160;:</term>
<listitem><simpara> Counter you want to increment.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-counter-decrement" role="function">
<title>gok_chunker_counter_decrement ()</title>
<indexterm zone="gok-chunker-counter-decrement"><primary sortas="gok_chunker_counter_decrement">gok_chunker_counter_decrement</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_counter_decrement       (<link linkend="gint">gint</link> CounterId);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>CounterId</parameter>&#160;:</term>
<listitem><simpara> Counter you want to decrement.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-state-restart" role="function">
<title>gok_chunker_state_restart ()</title>
<indexterm zone="gok-chunker-state-restart"><primary sortas="gok_chunker_state_restart">gok_chunker_state_restart</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_state_restart           (void);</programlisting>
<para>
Move to the first state.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-state-next" role="function">
<title>gok_chunker_state_next ()</title>
<indexterm zone="gok-chunker-state-next"><primary sortas="gok_chunker_state_next">gok_chunker_state_next</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_state_next              (void);</programlisting>
<para>
Move to the next state. Move to the first state if at the last state.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-state-jump" role="function">
<title>gok_chunker_state_jump ()</title>
<indexterm zone="gok-chunker-state-jump"><primary sortas="gok_chunker_state_jump">gok_chunker_state_jump</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_state_jump              (<link linkend="gchar">gchar</link> *NameState);</programlisting>
<para>
Change state to the given state.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>NameState</parameter>&#160;:</term>
<listitem><simpara> Name of the state you want to jump to.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-select-chunk" role="function">
<title>gok_chunker_select_chunk ()</title>
<indexterm zone="gok-chunker-select-chunk"><primary sortas="gok_chunker_select_chunk">gok_chunker_select_chunk</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_select_chunk            (void);</programlisting>
<para>
Sets the current chunk as the selected chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of keys in the selected chunk.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-highlight-chunk" role="function">
<title>gok_chunker_highlight_chunk ()</title>
<indexterm zone="gok-chunker-highlight-chunk"><primary sortas="gok_chunker_highlight_chunk">gok_chunker_highlight_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_highlight_chunk         (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Highlightes the given chunk.
Updates m_pChunkHighlighted with the chunk given.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunk that will be highlighted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-unhighlight-chunk" role="function">
<title>gok_chunker_unhighlight_chunk ()</title>
<indexterm zone="gok-chunker-unhighlight-chunk"><primary sortas="gok_chunker_unhighlight_chunk">gok_chunker_unhighlight_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_unhighlight_chunk       (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Unhighlightes the given chunk.
Updates m_pChunkHighlighted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunk that will be unhighlighed (made normal).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-highlight-center-key" role="function">
<title>gok_chunker_highlight_center_key ()</title>
<indexterm zone="gok-chunker-highlight-center-key"><primary sortas="gok_chunker_highlight_center_key">gok_chunker_highlight_center_key</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_highlight_center_key    (void);</programlisting>
<para>
Highlightes the center key on the current keyboard.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-highlight-first-chunk" role="function">
<title>gok_chunker_highlight_first_chunk ()</title>
<indexterm zone="gok-chunker-highlight-first-chunk"><primary sortas="gok_chunker_highlight_first_chunk">gok_chunker_highlight_first_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_highlight_first_chunk   (void);</programlisting>
<para>
Highlightes the first chunk on the current keyboard.
Updates m_pChunkHighlighted.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-highlight-first-key" role="function">
<title>gok_chunker_highlight_first_key ()</title>
<indexterm zone="gok-chunker-highlight-first-key"><primary sortas="gok_chunker_highlight_first_key">gok_chunker_highlight_first_key</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_highlight_first_key     (void);</programlisting>
<para>
Highlightes the first key in the selected chunk.
Updates m_pChunkitemHighlighted.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-insert-item-row-ltr" role="function">
<title>gok_chunker_insert_item_row_ltr ()</title>
<indexterm zone="gok-chunker-insert-item-row-ltr"><primary sortas="gok_chunker_insert_item_row_ltr">gok_chunker_insert_item_row_ltr</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_insert_item_row_ltr     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);</programlisting>
<para>
Adds a chunkitem (key) to a chunk (row). The new chunkitem will be added in the
sequence left to right (the leftmost key is the first key in the sequence).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the first chunk that will contain the new chunkitem.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pChunkitem</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunkitem that gets added to the chunk.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the chunkitem was added to the chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-insert-item-row-rtl" role="function">
<title>gok_chunker_insert_item_row_rtl ()</title>
<indexterm zone="gok-chunker-insert-item-row-rtl"><primary sortas="gok_chunker_insert_item_row_rtl">gok_chunker_insert_item_row_rtl</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_insert_item_row_rtl     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);</programlisting>
<para>
Adds a chunkitem (key) to a chunk (row). The new chunkitem will be added in the
sequence right to left (the rightmost key is the first key in the sequence).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the first chunk that will contain the new chunkitem.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pChunkitem</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunkitem that gets added to the chunk.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the chunkitem was added to the chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-insert-item-col-ttb" role="function">
<title>gok_chunker_insert_item_col_ttb ()</title>
<indexterm zone="gok-chunker-insert-item-col-ttb"><primary sortas="gok_chunker_insert_item_col_ttb">gok_chunker_insert_item_col_ttb</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_insert_item_col_ttb     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);</programlisting>
<para>
Adds a chunkitem (key) to a chunk (column). The new chunkitem will be added in the
sequence top to bottom (the topmost key is the first key in the sequence).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the first chunk that will contain the new chunkitem.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pChunkitem</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunkitem that gets added to the chunk.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the chunkitem was added to the chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-insert-item-col-btt" role="function">
<title>gok_chunker_insert_item_col_btt ()</title>
<indexterm zone="gok-chunker-insert-item-col-btt"><primary sortas="gok_chunker_insert_item_col_btt">gok_chunker_insert_item_col_btt</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gok_chunker_insert_item_col_btt     (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);</programlisting>
<para>
Adds a chunkitem (key) to a chunk (column). The new chunkitem will be added in the
sequence bottom to top (the bottommost key is the first key in the sequence).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the first chunk that will contain the new chunkitem.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pChunkitem</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunkitem that gets added to the chunk.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the chunkitem was added to the chunk, FALSE if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-dump-chunks" role="function">
<title>gok_chunker_dump_chunks ()</title>
<indexterm zone="gok-chunker-dump-chunks"><primary sortas="gok_chunker_dump_chunks">gok_chunker_dump_chunks</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_dump_chunks             (void);</programlisting>
<para>
Diagnostic function that prints all the chunks to stdout.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-dump-chunk" role="function">
<title>gok_chunker_dump_chunk ()</title>
<indexterm zone="gok-chunker-dump-chunk"><primary sortas="gok_chunker_dump_chunk">gok_chunker_dump_chunk</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_dump_chunk              (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Diagnostic function that prints the chunk to stdout.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunk that gets the dump.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-chunk-group" role="function">
<title>gok_chunker_chunk_group ()</title>
<indexterm zone="gok-chunker-chunk-group"><primary sortas="gok_chunker_chunk_group">gok_chunker_chunk_group</primary></indexterm><programlisting><link linkend="GokChunk">GokChunk</link>*           gok_chunker_chunk_group             (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="gint">gint</link> NumberGroups,
                                                         <link linkend="ChunkOrder">ChunkOrder</link> Order,
                                                         <link linkend="gboolean">gboolean</link> bCanReorder);</programlisting>
<para>
Breaks the given list of chunks into 2 or more groups.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the list of chunks that will be broken into groups.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>NumberGroups</parameter>&#160;:</term>
<listitem><simpara> Number of groups the chunks should be broken into.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Order</parameter>&#160;:</term>
<listitem><simpara> The order in which the chunks should be created. (see enum ChunkOrder)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bCanReorder</parameter>&#160;:</term>
<listitem><simpara> TRUE if the chunks can be reordered.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the first chunk in the list of chunks. Returns
NULL if the given chunk can't be divided into chunks.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-add-chunkitem" role="function">
<title>gok_chunker_add_chunkitem ()</title>
<indexterm zone="gok-chunker-add-chunkitem"><primary sortas="gok_chunker_add_chunkitem">gok_chunker_add_chunkitem</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_add_chunkitem           (<link linkend="GokChunk">GokChunk</link> *pChunk,
                                                         <link linkend="GokChunkitem">GokChunkitem</link> *pChunkitem);</programlisting>
<para>
Adds a chunkitem (key) to a chunk (group). The new chunkitem will be added
as the last chunkitem in the list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunk that will contain the new chunkitem.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pChunkitem</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunkitem that gets added to the chunk.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-count-chunkitems" role="function">
<title>gok_chunker_count_chunkitems ()</title>
<indexterm zone="gok-chunker-count-chunkitems"><primary sortas="gok_chunker_count_chunkitems">gok_chunker_count_chunkitems</primary></indexterm><programlisting><link linkend="gint">gint</link>                gok_chunker_count_chunkitems        (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Counts the number of items in the given chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the Chunk that will be counted.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of items in the chunk.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-make-2-vertical" role="function">
<title>gok_chunker_make_2_vertical ()</title>
<indexterm zone="gok-chunker-make-2-vertical"><primary sortas="gok_chunker_make_2_vertical">gok_chunker_make_2_vertical</primary></indexterm><programlisting><link linkend="GokChunk">GokChunk</link>*           gok_chunker_make_2_vertical         (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Creates 2 chunks that split the given chunk vertically.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunk that will be split.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the first chunk, NULL if it couldn't be created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-make-2-horizontal" role="function">
<title>gok_chunker_make_2_horizontal ()</title>
<indexterm zone="gok-chunker-make-2-horizontal"><primary sortas="gok_chunker_make_2_horizontal">gok_chunker_make_2_horizontal</primary></indexterm><programlisting><link linkend="GokChunk">GokChunk</link>*           gok_chunker_make_2_horizontal       (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Create 2 chunks that split the given chunk horizontally.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the chunks that will be split.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the first chunk, NULL if none could be created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-make-4" role="function">
<title>gok_chunker_make_4 ()</title>
<indexterm zone="gok-chunker-make-4"><primary sortas="gok_chunker_make_4">gok_chunker_make_4</primary></indexterm><programlisting><link linkend="GokChunk">GokChunk</link>*           gok_chunker_make_4                  (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
Create 4 chunks from the given chunk. The 4 chunks are ordered like:
1 2
3 4</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the first in a list of chunks that will be split.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the first chunk, NULL if none could be created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-highlight-chunk-number" role="function">
<title>gok_chunker_highlight_chunk_number ()</title>
<indexterm zone="gok-chunker-highlight-chunk-number"><primary sortas="gok_chunker_highlight_chunk_number">gok_chunker_highlight_chunk_number</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_highlight_chunk_number  (<link linkend="gint">gint</link> Number);</programlisting>
<para>
Highlight the chunk identified by a number.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Number</parameter>&#160;:</term>
<listitem><simpara> Id number of the chunk you want highlighted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-get-chunk" role="function">
<title>gok_chunker_get_chunk ()</title>
<indexterm zone="gok-chunker-get-chunk"><primary sortas="gok_chunker_get_chunk">gok_chunker_get_chunk</primary></indexterm><programlisting><link linkend="GokChunk">GokChunk</link>*           gok_chunker_get_chunk               (<link linkend="gint">gint</link> Number);</programlisting>
<para>
Finds a child chunk of the currently highlighted chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Number</parameter>&#160;:</term>
<listitem><simpara> Number of the chunk you are looking for.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the chunk, NULL if not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gok-chunker-highlight-all-keys" role="function">
<title>gok_chunker_highlight_all_keys ()</title>
<indexterm zone="gok-chunker-highlight-all-keys"><primary sortas="gok_chunker_highlight_all_keys">gok_chunker_highlight_all_keys</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_highlight_all_keys      (void);</programlisting>
<para>
Highlightes all keys on the current keyboard.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-unhighlight-all-keys" role="function">
<title>gok_chunker_unhighlight_all_keys ()</title>
<indexterm zone="gok-chunker-unhighlight-all-keys"><primary sortas="gok_chunker_unhighlight_all_keys">gok_chunker_unhighlight_all_keys</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_unhighlight_all_keys    (void);</programlisting>
<para>
Unhighlightes all keys on the current keyboard.</para>
<para>
</para></refsect2>
<refsect2 id="gok-chunker-resolve-overlap" role="function">
<title>gok_chunker_resolve_overlap ()</title>
<indexterm zone="gok-chunker-resolve-overlap"><primary sortas="gok_chunker_resolve_overlap">gok_chunker_resolve_overlap</primary></indexterm><programlisting><link linkend="void">void</link>                gok_chunker_resolve_overlap         (<link linkend="GokChunk">GokChunk</link> *pChunk);</programlisting>
<para>
If one of the chunks has more than one item, move an item to another chunk.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pChunk</parameter>&#160;:</term>
<listitem><simpara> Pointer to the list of chunke sthat need to be resolved.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
